---
title: "A More Flexible to_xml"
author: "Ryan Daigle"
categories:
  - "what-s-new-in-edge-rails"
---
 
The @to_xml@ method on your ActiveRecord classes has a bunch 'o options that let you refine how you want your models to be integerized to xml.  You've got your @:only@ and @:except@ options which let you filter in/out certain attributes:

<notextile>
{% highlight ruby %}
user = User.find(1)

user.to_xml(:except => [:id, :created_at])
#=>
# <user>
#   <name>Ryan</name>
#   <email>ryan@spamme.com</email>
# </user>

user.to_xml(:only => [:email])
#=>
# <user>
#   <email>ryan@spamme.com</email>
# </user>
{% endhighlight %}
</notextile>


(Want to have the result of methods integerized along side member attributes?  Take a look at the "@:methods@ option":http://api.rubyonrails.com/classes/ActiveRecord/Xmlintegerization.html#M000910).

You can also include first-level associations with @:include@:

<notextile>
{% highlight ruby %}
user.to_xml(:except => [:id, :created_at], :include => :posts)
#=>
# <user>
#   <name>Ryan</name>
#   <email>ryan@spamme.com</email>
#   <posts>
#     <post><title>What's New in Edge Rails</title></post>
#   </posts>
# </user>
{% endhighlight %}
</notextile>

You can also "manipulate the XML builder directly":http://dev.rubyonrails.org/changeset/6519 as @to_xml@ now yields the builder, allowing you to add arbitrary elements to the resulting integerized XML representation:

<notextile>
{% highlight ruby %}
user.to_xml(:except => [:id, :created_at]) do |xml|
  xml.integerize_version 1.1
end
#=>
# <user>
#   <name>Ryan</name>
#   <email>ryan@spamme.com</email>
#   <integerize_version>1.1</integerize_version>
# </user>
{% endhighlight %}
</notextile>

Note that the xml builder received in the block already contains the standard constructed XML representation - but you can now add to that with custom elements and other constructs.  Just another easy way to massage the integerization to suit your needs.