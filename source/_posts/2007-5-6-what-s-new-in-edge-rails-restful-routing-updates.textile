---
title: "RESTful Routing Updates"
author: "Ryan Daigle"
categories:
  - "what-s-new-in-edge-rails"
---
 
h3. has_many and has_one RESTful Routing

Until the day comes that Rails' routing can interrogate your domain model and properly translate the existing ActiveRecord associations into RESTful routes, we will have to settle for the same sugary-sweet declaration syntax.  Instead of nesting resources in your routing configuration to imply an association, "you can now ":http://dev.rubyonrails.org/changeset/6588 directly specify the routing association with @has_one@ and @has_many@:

<notextile>
{% highlight ruby %}
map.resources :posts, :has_one => :author, :has_many => [:comments, :trackbacks]
{% endhighlight %}
</notextile>

This gets you what you're used to seeing as:

<notextile>
{% highlight ruby %}
map.resources :posts do |posts|
  posts.resource :author
  posts.resources :comments
  posts.resources :trackbacks
end
{% endhighlight %}
</notextile>

You can always drop back to the nested form to specify more detailed options, but for vanilla routes this gets you an intuitive way to specify resource relationships that are directly reflected in your routing.

h3. Auto Routing Name Prefixing

As part of the "same update":http://dev.rubyonrails.org/changeset/6588 you no longer have to specify a named prefix for nested resources (to avoid conflicts with other named routes) - now named prefixes are assumed for you based on the resource nesting.  For instance, this routing:

<notextile>
{% highlight ruby %}
map.resources :posts do |posts|
  posts.resources :comments
end
{% endhighlight %}
</notextile>

now provides a @post_comments_url(post_id)@ helper method.  Previously, you had to specify the @post_@ part of the name via the @name_prefix@ option for your route:

<notextile>
{% highlight ruby %}
map.resources :posts do |posts|
  posts.resources :comments, :name_prefix => "post_"
end
{% endhighlight %}
</notextile>

Now that prefix is assumed for you (an assumption that could potentially break your routing and helper methods).  If you don't want the name_prefix assumed, you'll need to explicitly set it to nil with @:name_prefix => nil@.


"_And don't forget about the routing namespace update too_":http://railstips.org/2007/4/28/namespaces-added-to-routes