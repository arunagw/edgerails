---
title: "Easy Memoization"
author: "Ryan Daigle"
categories:
  - "what-s-new-in-edge-rails"
---
 
Most people will recognize the pattern of memoization to provide a basic caching mechanism (that's not a misspelling, it really doesn't have an 'r') :

<notextile>
{% highlight ruby %}
class Person < ActiveRecord::Base
  def social_security
    @social_security ||= decrypt_social_security
  end
  ...
end
{% endhighlight %}
</notextile>

The big problem with this common type of memoization is that you've littered your method implementation with caching logic.  Caching is best applied in a transparent manner - and "ActiveSupport now lets you easily insert memoization":http://github.com/rails/rails/commit/8a9934a9d9fc98b56c4566ae2e3fd4d83e505d3e into your classes:

<notextile>
{% highlight ruby %}
class Person < ActiveRecord::Base

  def social_security
    decrypt_social_security
  end

  # Memoize the result of the social_security method after
  # its first evaluation (must be placed after the target
  # method definition).
  #
  # Can pass in multiple symbols:
  #  memoize :social_security, :credit_card
  memoize :social_security
  ...
end

@person = Person.new
@person.social_security  # decrypt_social_security is invoked
@person.social_security  # decrypt_social_security is NOT invoked
{% endhighlight %}
</notextile>

@memoize@ transparently aliases the method and stores the value of your method's first evaluation in an instance variable - giving you the same functionality of the unrefined @var ||= ...@ implementation with much less clutter.

This implementation also handles the case where you freeze your @User@ object before ever calling the @social_security@ method.  Using conventional memoization, calls to @social_security@ would give you a @Canâ€™t modify instance variable@ error instead of happily evaluating as you would want.

This implementation also will not execute the target method more than once if the original execution resulted in @nil@ or @false@ - which is a flaw of the conventional pattern.  You can, however, "force the target method to be invoked":http://github.com/rails/rails/commit/e1f23da53cef20a60e4bf458d959fe2bfe7d52ea with the optional @reload@ parameter:

<notextile>
{% highlight ruby %}
# Force invocation of target method, i.e. "decrypt_social_security"
# is invoked independent of there being a cached value
@person.social_security(true)
{% endhighlight %}
</notextile>

So start giving @memoize@ some play - it's just the right thing to do.

_Update:_ You can "now":http://github.com/rails/rails/commit/3fc9a67c04bade858e7ac7eb8cd94eec6a63ec27 use @unmemoize_all@ and @memoize_all@ to undo and redo your memoized properties.