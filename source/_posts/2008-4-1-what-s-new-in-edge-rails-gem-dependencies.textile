---
title: "Gem Dependencies"
author: "Ryan Daigle"
categories:
  - "what-s-new-in-edge-rails"
---
 
Rails plugins are great for many reasons, one being that they provide extra functionality without being an external dependency - they're packaged right there with your application.  Until recently, there was no way do programmatically define a Rails applications' external gem dependencies and we were left with "rolling our own":http://errtheblog.com/posts/50-vendor-everything gem dependency solutions.

That all changes with a nice way to "define, and tie, gem dependencies to our Rails apps":http://dev.rubyonrails.org/changeset/9140.  In our @environment.rb@ we have the following:

<notextile>
{% highlight ruby %}
Rails::Initializer.run do |config| 

  # Require the latest version of haml
  config.gem "haml"

  # Require a specific version of chronic
  config.gem "chronic", :version => '0.2.3'

  # Require a gem from a non-standard repo
  config.gem "hpricot", :source => "http://code.whytheluckystiff.net"

  # Require a gem that needs to require a file different than the gem's name
  # I.e. if you normally load the gem with require 'aws/s3' instead of
  # require 'aws-s3' then you would need to specify the :lib option
  config.gem "aws-s3", :lib => "aws/s3" 
end 
{% endhighlight %}
</notextile>

So great - when your app loads up it will automatically find and require each of the gems you've listed.  But what if you're on a system that doesn't have all of these gems installed, or you've just deployed to a fresh environment?  There's now a rake task that will install all the referenced @config.gems@ on your target system:

<notextile>
{% highlight ruby %}
rake gems:install
{% endhighlight %}
</notextile>

_Before running this you can see what gem dependencies your app has by running @rake gems@._

However, this still doesn't package these gem dependencies with the app, it only refers to system-dependent gems.  If you want to pull these gems into your application source you can do so with the new @rake gems:unpack@ task:

<notextile>
{% highlight ruby %}
# Unpack all gems to vendor/gems
rake gems:unpack
{% endhighlight %}
</notextile>

You can also unpack individual gems:

<notextile>
{% highlight ruby %}
# Unpack only the hpricot gem to vendor/gems
rake gems:unpack GEM=hpricot
{% endhighlight %}
</notextile>

This will unpack the gem into the @vendor/gems/hpricot-0.5@ directory which is automatically searched as part of the @config.gem@ startup.

Your deployment strategy can now choose to automatically install required gems in each target environment or just package gems as part of the application source.

_Update:_ "Just added":http://dev.rubyonrails.org/changeset/9215 is the ability to build gems that have native extensions:

<notextile>
{% highlight ruby %}
rake gems:build
{% endhighlight %}
</notextile>