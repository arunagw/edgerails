---
title: "Better Exception Handling"
author: "Ryan Daigle"
categories:
  - "what-s-new-in-edge-rails"
---
 
It's a common pattern to redirect the user to, or render specific pages for different types of exceptions that are thrown in your application.  Prior to this "changeset":http://dev.rubyonrails.org/changeset/7597 this usually involved overloading the @rescue_action_in_public@ method of your controllers:

<notextile>
{% highlight ruby %}
class PostsController < ApplicationController
  def rescue_action_in_public(exception)
    case(exception)
      when ActiveRecord::RecordNotFound then render :file => '/bad_record'
      when NoMethodError then render :file => '/no_method'
      else render :file => '/error'
    end
  end
end
{% endhighlight %}
</notextile>

It's easy to see that this can quickly grow to be an ugly mass of a @case@ or @if@/@else@ statement.

Now we've got a much cleaner way to map exceptions to handlers with the new @rescue_from@ support.  @rescue_from@ maps an exception type directly to a handler method name for a very concise and direct way of dealing with exceptions:

<notextile>
{% highlight ruby %}
class PostsController < ApplicationController

  # Declare exception to handler methods
  rescue_from ActiveRecord::RecordNotFound, :with => :bad_record
  rescue_from NoMethodError, :with => :show_error

  def bad_record; render :file => '/bad_record'; end
  def show_error(exception); render :text => exception.message; end

end
{% endhighlight %}
</notextile>

Note that the exception handler methods can be either no-arg methods or take the exception in question as an argument (as in @show_error@ above).

"You can also":http://dev.rubyonrails.org/changeset/7822 use a block or proc to specify exception handling in @rescue_from@:

<notextile>
{% highlight ruby %}
class PostsController < ApplicationController

  # Declare exception to handler methods
  rescue_from(ActiveRecord::RecordNotFound) { |e| render :file => '/bad_record' }
  rescue_from NoMethodError, :with => proc { |e| render :text => e.message }

end
{% endhighlight %}
</notextile>