---
title: "Around Filters are Here"
author: "Ryan Daigle"
categories:
  - "what-s-new-in-edge-rails"
---
 
_For the "second time":http://ryandaigle.com/articles/2006/07/20/a-rails-feature-you-should-be-using-with_scope#comment-351 I've had my virtual hand slapped for trumpeting a poor usage of @with_scope@ .  For the record, I want to make it clear that one should be using the rich domain model that active record provides to operate on associated objects: @user.assets.find()@ and @user.asset.create()@ instead of scoping to a user as my and Roman's examples implied. Just a case of not thinking hard enough to come up with an appropriate example.  Sorry David, won't happen again!_


I've "mentioned":/articles/2006/07/20/a-rails-feature-you-should-be-using-with_scope    the "Meantime filter":http://roman2k.free.fr/rails/meantime_filter/0.1.0/rdoc/ plugin by Roman Le Negrate in the past as a very useful little utility - apparently the core team agrees as "around filtering":http://dev.rubyonrails.org/changeset/5163 is now part of edge Rails.

Usage is pretty much the same as with meantime:

<pre>
<code>
class AssetController < ActionController

  before_filter :verify_login
  around_filter :benchmark

  def assets
    @assets = Asset.find(:all)
  end

  def benchmark
    benchmark("Asset benchmark") { yield }
  end

end
</pre>
</code>

You can also define a class to handle your filtering needs (whose @filter@ method @yields@ to the action block)

<pre>
<code>
class AssetController < ActionController

  around_filter BenchmarkFilter   # or BenchmarkFilter.new
  ...

  class BenchmarkFilter
    def filter
      benchmark("Benchmarking...") { yield }
    end
  end

end

</pre>
</code>


Or you can directly pass a Proc in as the filter:

<pre>
<code>
class AssetController < ActionController

  around_filter (:only => :assets) do |controller,action_block| 
    controller.benchmark("Benchmarking...") { action_block.call }
  end
  ...
end
</pre>
</code>

Since the around filter explicitly governs the execution of the action being requested, you can use them to skip the action completely. This would act the same as a @before_filter@ that returned false.