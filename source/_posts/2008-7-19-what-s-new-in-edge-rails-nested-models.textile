---
title: "Nested Model Mass Assignment"
author: "Ryan Daigle"
categories:
  - "what-s-new-in-edge-rails"
---
 
_Looks like this feature has been pulled from Edge Rails though it's tentatively "scheduled to come back":http://groups.google.com/group/rubyonrails-core/browse_thread/thread/3c61e00916c365e5 post the 2.2 release.  "Vote here":http://rails.uservoice.com/pages/rails3/suggestions/99641-nested-model-forms if you want to see this feature implemented in Rails!_

"Nested models":http://railscasts.com/episodes/75 (nested forms by another name) describe the scenario when you want to create and modify values of nested attributes through a containing model.  For instance, if you have an user model with many phone numbers:

<notextile>
{% highlight ruby %}
class User < ActiveRecord::Base
  validates_presence_of :login
  has_many :phone_numbers
end

class PhoneNumber < ActiveRecord::Base
  validates_presence_of :area_code, :number
  belongs_to :user
end
{% endhighlight %}
</notextile>

you may want to be able to create the user and a group of phone numbers _at the same time_.  This is what this looks like with the new "mass assignment":http://github.com/rails/rails/commit/e0750d6a5c7f621e4ca12205137c0b135cab444a functionality of Rails keyed off of the @:accessible@ option of the association declaration (@:phone_numbers@, in this case).

<notextile>
{% highlight ruby %}
class User < ActiveRecord::Base
  validates_presence_of :login
  has_many :phone_numbers, :accessible => true
end

ryan = User.create( {
  :login => 'ryan',
  :phone_numbers => [
    { :area_code => '919', :number => '123-4567' },
    { :area_code => '920', :number => '123-8901' }
  ]
})

ryan.phone_numbers.count #=> 2
{% endhighlight %}
</notextile>

A single hash of values being sent to @User.create@ results in both a new user object and new associated phone numbers.  Previously, you would have had to manually create your own @phone_numbers=@ setter method on user to get this same functionality:

<notextile>
{% highlight ruby %}
class User < ActiveRecord::Base

  ...

  def phone_numbers=(attrs_array)
    attrs_array.each do |attrs|
      phone_numbers.create(attrs)
    end
  end

end
{% endhighlight %}
</notextile>

Mass assignment now gives you this functionality for free.

This may not look like much, but it is a step in the direction of letting you use nested forms.  Consider a user registration form where a user can enter their login name and their phone numbers in the same form (through the use of "@fields_for@":http://api.rubyonrails.com/classes/ActionView/Helpers/FormHelper.html#M001738 which will bundle nested model attributes into a single form):

<notextile>
{% highlight ruby %}
<% form_for @user do |f| %>
  <%= f.text_field :login %>
  <% fields_for :phone_numbers do |pn_f| %>
    <%= pn_f.text_field :area_code %>
    <%= pn_f.text_field :number %>
  <% end %>
  <%= submit_tag %>
<% end %>
{% endhighlight %}
</notextile>

This form, when submitted to the following standard RESTful @UserController@, will correctly create the user and its associated phone numbers through the beauty of mass assignment.

<notextile>
{% highlight ruby %}
class UserController < ApplicationController

  # Create a new user and their phone numbers with mass assignment
  def new
    @user = User.create(params[:user])
    respond_to do |wants|
      ...
    end
  end
end
{% endhighlight %}
</notextile>

Mass assignment can be used on all association types - @:belongs_to@, @:has_one@, :@has_many@ and @:has_and_belongs_to_many@ as long as the @:accessible => true@ option is specified.

This is a very convenient addition to ActiveRecord, but the real zinger will come with "full nested form support":http://groups.google.com/group/rubyonrails-core/browse_thread/thread/4049b4b313fa8be2 when you can create, update and delete these nested models directly from what is pushed down in the parameter hash of a form submission.  This would allow for the functionality in this "complex forms screencast":http://railscasts.com/episodes/75 with minimal hassle.  What a fine day that would be.