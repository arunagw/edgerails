---
title: "Pessimistic Locking"
author: "Ryan Daigle"
categories:
  - "what-s-new-in-edge-rails"
---
 
_"Tim Lucas":http://www.sitepoint.com/articlelist/443 over at SitePoint "already talked about this feature":http://www.sitepoint.com/blogs/2006/06/21/activerecord-receives-pessimistic-locking/ and has added good detailed explanation in the comments._

Rails has long provided "optimistic locking":http://en.wikipedia.org/wiki/Optimistic_locking through the use of its "lock_version":http://api.rubyonrails.com/classes/ActiveRecord/Locking.html magic column.  In a natural compliment to that functionality, edge rails now also provides "pessimistic locking":http://www.agiledata.org/essays/concurrencyControl.html#PessimisticLocking support:

"http://dev.rubyonrails.org/changeset/4460":http://dev.rubyonrails.org/changeset/4460
"http://dev.rubyonrails.org/changeset/4461":http://dev.rubyonrails.org/changeset/4461
"http://dev.rubyonrails.org/changeset/4462":http://dev.rubyonrails.org/changeset/4462

Pessimistic locking is specified with the @lock@ option in your standard @find@ method:
<pre>
<code>
Person.transaction do
  p = Person.find(1, :lock=> true)
  p.username = 'new'
  p.save!
end
</code>
</pre>
This will lock the person row during the course of the specified transaction and prevent updates from occuring while the object is manipulated.

You can also lock an already loaded model with the new @lock!@ method:

@person.lock!@

which is equivalent to:

@person.reload(:lock => true)@

h3. Optimistic vs. Pessimistic Locking

<br/>
With optimistic locking a check is done on the @lock_version@ column _by the Rails framework_ when a row is updated to make sure that it has the same value as when the model was first read from the database.  If the @lock_version@ has changed while the object has been in memory we assume that it's been updated underneath us and a @ActiveRecord::StaleObjectError@ is thrown.  This is easily implemented by appending a @WHERE lock_version = X@ clause to the update SQL.  If no rows are updated it means the @lock_version@ has changed.  The important thing to note here is that this protection is provided _at the application_ level.

Pessimistic locking is functionality provided by the database that happens at the database level.  When invoked it actually locks the row(s) in question so that other update requests are blocked.  This is usually done with the @FOR UPDATE@ SQL clause.  The benefit of this is that you have an exclusive lock on that row so no other operations can occur and you are guaranteed the data will not change.  However, this is also the *big* downside - everybody else is blocked!  You would never want to obtain an exclusive lock on a row and then either forget about it or have it locked for an extended amount of time.  When another part of your application wants to update that data no errors will be raised, it will just hang.  Nasty.  Basically, don't use pessimistic locking unless you know what you're doing and have a reliable way of releasing the lock.