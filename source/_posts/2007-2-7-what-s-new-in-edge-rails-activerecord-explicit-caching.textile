---
title: "ActiveRecord Explicit Caching"
author: "Ryan Daigle"
categories:
  - "what-s-new-in-edge-rails"
---
 
A tiny but useful update was "just added":http://dev.rubyonrails.org/changeset/6138 to edge Rails that lets you specify a block for which a query cache will be present.  The query cache will cache @select@ statements and guarantee that identical select statements will only hit the database once during the block.  Any inserts, updates or deletes will clear the cache as the result of any cached queries may have changed.

<notextile>
{% highlight ruby %}
User.cache do
  me = User.find(1)   # DB hit
  again = User.find(1)   # Cache hit
  me.update_attribute(:name => 'Not Ryan')  # Cache cleared
  me = User.find(1)   # DB hit
end
{% endhighlight %}
</notextile>

While you might not think this is very useful in your various controller methods which _should_ be of limited scope, think of your views that may call the same authentication queries several times within the view body.  While a simple @ @is_admin || = user.get_role('ADMIN')@ custom cache mechanism would work just fine, you now have the options to wrap your view within a query cache and have it handled for you.

The query cache is keyed on the raw SQL statement, so it's very minimalist in its complexity.  It doesn't know that your identical query with different order conditions is the same query as before - and will hit the db again.  It only caches identical SQL statements, literally.