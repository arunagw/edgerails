---
title: "Nested Resource RESTful URL Builder"
author: "Ryan Daigle"
categories:
  - "what-s-new-in-edge-rails"
---
 
_Don't go too overboard with this stuff - it's meant primarily for internal (to Rails) usage..._

The march to RESTful nirvana continues with a drop dead easy way to "build nested resource URLs":http://dev.rubyonrails.org/changeset/6951.  Let's review.

Assuming the following routing configuration:

<notextile>
{% highlight ruby %}
map.resources :categories do |categories|
  categories.resources :articles
end
{% endhighlight %}
</notextile>

This automatically builds a @category_url(category)@ and @category_article_url(category, article)@ helper (among others) that will build the appropriate URLs:

<notextile>
{% highlight ruby %}
category_url(@category) #=> /categories/1
category_article_url(@category, @article) #=> /categories/1/article/1
{% endhighlight %}
</notextile>

All right, that's great.  But why should we have to spell out these lengthy helper method calls when it's clear that the first argument is a @Category@ and the second is an @Article@?  Can't the appropriate helper method be implied by the types of these arguments?  Yes - they can, and now they are with the new @url_for@ update.  Now you can pass in a collection of models to @url_for@, in order of nesting (root to child), and get the correct URL:

<notextile>
{% highlight ruby %}
url_for(@category) #=> /categories/1
url_for([@category, @article]) #=> /categories/1/article/1
{% endhighlight %}
</notextile>

You can always fall back to the named routes provided for you by RESTful routing, but you now have an option to build URLs with an implied resource nesting.