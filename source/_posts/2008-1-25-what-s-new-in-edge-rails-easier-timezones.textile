---
title: "Easier Timezones"
author: "Ryan Daigle"
categories:
  - "what-s-new-in-edge-rails"
---
 
The days of forcing time-zone support into your Rails apps with not "one":http://agilewebdevelopment.com/plugins/tzinfo_timezone, but "two":http://dev.rubyonrails.com/svn/rails/plugins/tztime/ plugins are over.  It would appear that Rails now has its own way of "dealing":http://dev.rubyonrails.org/changeset/8696 with "timezones":http://dev.rubyonrails.org/changeset/8806 via a custom implementation (though it's still based on the "tzinfo gem":http://tzinfo.rubyforge.org/).

Here's the deal.  Set the @Time.zone@ variable to the local timezone.  All further date manipulations will automatically reflect this local time while being saved to the database in UTC.  Here's what that will look like:

<notextile>
{% highlight ruby %}
# Set the local time zone
Time.zone = "Pacific Time (US & Canada)"

# All times will now reflect the local time
article = Article.find(:first)
article.published_at #=> Wed, 30 Jan 2008 2:21:09 PST -08:00

# Setting new times in UTC will also be reflected in local time
article.published_at = Time.utc(2008, 1, 1, 0)
article.published_at  #=> Mon, 31 Dec 2007 16:00:00 PST -08:00
{% endhighlight %}
</notextile>

So how can we use this new timezone support in the real world - as in our Rails apps where you let users define their own timezone?  We can do this using a before filter to set @Time.zone@, much in the same way you're "used to doing":http://weblog.jamisbuck.org/2007/2/2/introducing-tztime:

<notextile>
{% highlight ruby %}
class ApplicationController < ActionController::Base

  before_filter :set_timezone

  def set_timezone
    # current_user.time_zone #=> 'London'
    Time.zone = current_user.time_zone
  end
end
{% endhighlight %}
</notextile>

Now your controller actions and views will automatically have their dates represented in the user's timezone.

To set a default timezone for your app, do so in @environment.rb@:

<notextile>
{% highlight ruby %}
Rails::Initializer.run do |config|
  config.time_zone = "Hawaii"
end
{% endhighlight %}
</notextile>

To get the current time in the currently set timezone you can use @Time.zone.now@:

<notextile>
{% highlight ruby %}
# Instead of Time.now
Time.zone.now
{% endhighlight %}
</notextile>

At the end of the day you've got a timezone solution built into Rails that avoids needless dependencies and establishes a common practice for multi-timezone applications.

_This article leave you wanting for more (it won't offend me)?  If so, check out Geoff Buesing's incredibly detailed and thorough "timezone writeup":http://mad.ly/2008/04/09/rails-21-time-zone-support-an-overview/.  It looks to be the first of a few tutorials by the guy who actually wrote this functionality._