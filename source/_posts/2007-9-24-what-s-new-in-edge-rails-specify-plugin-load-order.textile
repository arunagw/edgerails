---
title: "Specify Plugin Load Ordering"
author: "Ryan Daigle"
categories:
  - "what-s-new-in-edge-rails"
---
 
You've always been able to specify exactly which plugins you want to be loaded up with your Rails app, instead of haphazardly loading everything in @vendor/plugins@ with this little snippet that you may or may not see in your @environment.rb@ file:

<notextile>
{% highlight ruby %}
# Only load the plugins named here, by default all plugins in vendor/plugins are loaded 
config.plugins = %W( exception_notification ssl_requirement ) 
{% endhighlight %}
</notextile>

The problem with this is that while you can explicitly specify which plugins you want loaded and in what order, it becomes quite tedious to list out every plugin when you only care about the load order of a select few.

Well, this "has been taken care of":http://dev.rubyonrails.org/changeset/7531 with the @:all@ symbol you can now use in your @config.plugin@ list to denote all other plugins not explicitly listed:

<notextile>
{% highlight ruby %}
config.plugins = [ :exception_notification, :ssl_requirement, :all ] 
{% endhighlight %}
</notextile>

This gives you finer-grain control over your plugin load order.  You can even use @:all@ in the middle of your load order if you want to push some plugins to the back of the line:

<notextile>
{% highlight ruby %}
config.plugins = [ :exception_notification, :all, :ssl_requirement ] 
{% endhighlight %}
</notextile>