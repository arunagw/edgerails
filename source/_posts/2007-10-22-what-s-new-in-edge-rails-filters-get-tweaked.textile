---
title: "Filters get Tweaked"
author: "Ryan Daigle"
categories:
  - "what-s-new-in-edge-rails"
---
 
"Controller filters":http://api.rubyonrails.com/classes/ActionController/Filters/ClassMethods.html just got a "little update":http://dev.rubyonrails.org/changeset/7984 that may mess with your flow.  As of now, returning @false@ no longer halts the execution of the action chain.  Instead, rendering or redirecting is what automatically stops the action chain.

If you think about it, it makes sense that rendering or redirecting within a filter signals the abortion of normal action execution since you can only render/redirect once per call and doing so reasonably indicates that no more processing is required.

So where before you might have had a filter such as:

<notextile>
{% highlight ruby %}
def must_be_logged_in
  if(not user_logged_in?)
    redirect_to login_url
    return false
  end
end
{% endhighlight %}
</notextile>

You can now let the act of rendering or redirecting imply completion instead of returning @false@:

<notextile>
{% highlight ruby %}
def must_be_logged_in
  redirect_to login_url if not user_logged_in?
end
{% endhighlight %}
</notextile>

At first blush I thought this might mess up existing filters, but a quick review of mine indicated that whenever I return false I've already rendered or redirected.  Not sure if this holds true for everybody or not...