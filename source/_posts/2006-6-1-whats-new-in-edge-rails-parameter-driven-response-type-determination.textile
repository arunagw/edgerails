---
title: "Parameter Driven Response-Type Determination"
author: "Ryan Daigle"
categories:
  - "what-s-new-in-edge-rails"
---
 
The @HTTP_ACCEPT@ header is used by web-clients to tell your application what type of response it wants and is the magic behind the very slick "@responds_to@":http://api.rubyonrails.com/classes/ActionController/MimeResponds/InstanceMethods.html#M000062 method of your controller.  Rails edge now supports the case when you want to specify the type of response as a request parameter and not as an http header.

Currently, when a client sends an Http request to your app with an @HTTP_ACCEPT@ header value of @application/xml@, you can do this in your controller to render the response as the appropriate XML:

<pre>
<code>
# From example at:
# http://api.rubyonrails.com/classes/ActionController/MimeResponds/InstanceMethods.html#M000062
...
respond_to do |wants|
  wants.html
  wants.xml { render :xml => @people.to_xml }
end
...
</code>
</pre>

Great, we've got an easy way to render the type of response the client has asked for without duplicating our controller logic.  _But_, we don't yet have a way to trigger this little bit of magic from anything other than the Http header - not a very friendly place to hang out.  That's what "changeset 4384":http://dev.rubyonrails.org/changeset/4384 addresses - the ability to determine the requested response type from a normal http parameter instead of the http header.

h4. How it Works

Telling the request what response type you want is now as easy as adding a @format@ parameter to your request and using the same @respond_to@ determination as before.  So this request sent from your web browser (which always sends an @HTTP_ACCEPT@ header value of @text/html@ or @*/*@)

<pre>
<code>
http://host/action?format=xml
</code>
</pre>

Will override the supplied @HTTP_ACCEPT@ header and will trigger the @xml@ block of @respond_to@ in your controller (imitating @HTTP_ACCEPT@ = @application/xml@)

Overall a great way to programatically specify the response type without monkeying with http headers.

For further reading on the topic, here are some related posts:
* "Discovering HTTP #1: The Accept header":http://www.loudthinking.com/arc/000572.html
* "Content Negotiation And Rails":http://cfis.savagexi.com/articles/2006/03/23/content-negotiation-and-rails
* "Rails Weenie question: respond_to and redirects":http://rails.techno-weenie.net/question/2006/3/28/respond_to_and_redirects
* "respond_to API":http://api.rubyonrails.com/classes/ActionController/MimeResponds/InstanceMethods.html#M000062